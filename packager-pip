#!/usr/bin/env bash

. ${os_toolkit_import:?}

function ask-mode() {
	[[ "$VIRTUAL_ENV" == "" ]]
	IN_ENV=$?

	os_menu --title "How do you want to run PIP?" --default virtual \
		"root System-wide packages" \
		"user Personal packages" \
		"virtual This project only"
	case ${os_menu_answer:?} in
	r | root)
		MODE="sudo"
		PIP="pip"
		AS_USER=""
		;;
	v | virtual)
		if [[ "$IN_ENV" != 1 ]]; then
			activate=$(find . -name 'activate')
			# shellcheck disable=SC2086
			os_menu --title "Not running in a virtual environment. Do you want to activate one?" \
				$activate \
				"create Create a new virtual environment"
			if [[ ${os_menu_answer:?} == "create" ]]; then
				os_menu --title "Where do you want to create it?" --allow-other \
					"$PWD/env Here, named 'env'" \
					"$PWD/venv Here, named 'venv'"
				os_info run python3 -m venv "$os_menu_answer"
				activate="$os_menu_answer/bin/activate"
			fi
			os_info "Activating the environment..."
			# shellcheck disable=SC1090
			. "$activate"
		fi
		MODE="run"
		PIP="pip"
		AS_USER=""
		;;
	*)
		MODE="run"
		PIP="pip"
		AS_USER="--user"
		;;
	esac
}

case $1 in
enabled)
	hash python3 2>/dev/null || (
		echo "'python3' is not installed."
		exit 1
	)
	hash pip 2>/dev/null || (
		echo "'pip' is not installed"
		exit 1
	)
	;;
name)
	echo -n "Python dependencies"
	;;
install)
	shift
	ask-mode
	if [[ $# == 0 ]]; then
		requirements=$(find . -name requirements.txt)
		if [[ $(wc <<<"$requirements" -l) != 1 ]]; then
			# shellcheck disable=SC2086
			os_menu --title "Choose which file to install packages from:" \
				$requirements
			requirements="$os_menu_answer"
		fi
		os_info $MODE "$PIP install $AS_USER -r $requirements"
	else
		os_info $MODE "$PIP install $AS_USER $*"
	fi
	;;
upgrade)
	shift
	ask-mode
	if [[ $# -eq 0 ]]; then
		os_info $MODE "$PIP list --outdated"
		os_info "The above packages can be updated. Call 'packager upgrade <package name>' to upgrade them."
	else
		os_info $MODE "$PIP install $AS_USER --upgrade $*"
	fi
	;;
clean)
	os_info "Nothing to do on PIP."
	;;
remove | purge)
	shift
	ask-mode
	os_info $MODE "$PIP uninstall $AS_USER $*"
	;;
search)
	shift
	os_info "Not implemented yet. Please submit a merge request at https://gitlab.com/opensavvy/packager"
	;;
*)
	os_info "Invalid command '$1'."
	exit 2
	;;
esac
